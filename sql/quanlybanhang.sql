CREATE DATABASE QUANLYBANHANG;
GO

USE QUANLYBANHANG;
GO

CREATE TABLE MANUFACTURER (
                FAC_ID INT NOT NULL IDENTITY,
				NAME VARCHAR(255) NOT NULL,
				COUNTRY VARCHAR(255),
				CONTACT_NUM VARCHAR(50),
				CITY VARCHAR(255),
				PRIMARY KEY (FAC_ID)
);


CREATE TABLE STORE (
                STORE_ID INT NOT NULL IDENTITY,
				STORE_NAME VARCHAR(255) NOT NULL,
				CONTACT_NUM VARCHAR(50),
				EMAIL VARCHAR(255),
				STREET VARCHAR(255),
				CITY VARCHAR(255),
				PRIMARY KEY (STORE_ID)
);


CREATE TABLE CATEGORY (
                CATEGORY_ID INT NOT NULL IDENTITY,
                NAME VARCHAR(255) NOT NULL,
                PRIMARY KEY (CATEGORY_ID)
);


CREATE TABLE PRODUCT (
                PRODUCT_ID INT NOT NULL IDENTITY,
				CATEGORY_ID INT NOT NULL,
				FAC_ID INT NOT NULL,
				NAME VARCHAR(255) NOT NULL,
				DESCRIPTION VARCHAR(255),
				COLOR VARCHAR(50) NOT NULL,
				SIZE INT NOT NULL,
				WEIGHT DOUBLE PRECISION NOT NULL,
				WARRANTY VARCHAR(255) NOT NULL,
				PRICE DOUBLE PRECISION NOT NULL,
				PRIMARY KEY (PRODUCT_ID),
				FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID),
				FOREIGN KEY (FAC_ID) REFERENCES MANUFACTURER(FAC_ID)
);


CREATE TABLE STOCK (
                STOCK_ID INT NOT NULL IDENTITY,
                CATEGORY_ID INT NOT NULL,
                PRODUCT_ID INT NOT NULL,
                STORE_ID INT NOT NULL,
                QUANTITY INT NOT NULL,
				FAC_ID INT NOT NULL,
                PRIMARY KEY (STOCK_ID),
				FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID),
				FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
				FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID),
				FOREIGN KEY (FAC_ID) REFERENCES MANUFACTURER(FAC_ID)
);


CREATE TABLE ACCOUNT (
                ACCOUNT_ID INT NOT NULL IDENTITY,
                ACC_NAME VARCHAR(255) NOT NULL,
                PASSWORD VARCHAR(255) NOT NULL,
                CREATE_DATE DATE NOT NULL,
                STATUS VARCHAR(255),
                ACCOUNT_TYPE VARCHAR(255) NOT NULL,
                PRIMARY KEY (ACCOUNT_ID)
);


CREATE TABLE EMPLOYEE (
                EMP_ID INT NOT NULL IDENTITY,
				ACCOUNT_ID INT NOT NULL,
				STORE_ID INT NOT NULL,
				FIRST_NAME VARCHAR(255) NOT NULL,
				LAST_NAME VARCHAR(255) NOT NULL,
				PHONE_NUMBER VARCHAR(50),
				MANAGER_ID INT,
				Parent_EMP_ID INT,
				Parent_ACCOUNT_ID INT,
				PRIMARY KEY (EMP_ID),
				FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID),
				FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID)
);


CREATE TABLE CUSTOMER (
                CUS_ID INT NOT NULL IDENTITY,
				ACCOUNT_ID INT NOT NULL,
				FIRST_NAME VARCHAR(255) NOT NULL,
				LAST_NAME VARCHAR(255) NOT NULL,
				PHONE_NUMBER VARCHAR(50),
				ADDRESS VARCHAR(255),
				PRIMARY KEY (CUS_ID),
				FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID)
);


CREATE TABLE ORDERS (
                ORDER_ID INT NOT NULL IDENTITY,
                CUS_ID INT NOT NULL,
                ACCOUNT_ID INT NOT NULL,
                ORDER_DATE DATE NOT NULL,
                TOTAL_AMOUNT FLOAT NOT NULL,
                PRIMARY KEY (ORDER_ID),
				FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID),
				FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID),
);


CREATE TABLE TRANSACTIONS (
        TRANSAC_ID INT NOT NULL IDENTITY,
		ORDER_ID INT NOT NULL,
		CUS_ID INT NOT NULL,
		ACCOUNT_ID INT NOT NULL,
		TRANSAC_DATE DATE NOT NULL,
		AMOUNT DOUBLE PRECISION NOT NULL,
		STATUS VARCHAR(50),
		TRANSAC_TYPE VARCHAR(50),
		PRIMARY KEY (TRANSAC_ID),
		FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
		FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID),
		FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID),
);



CREATE TABLE ORDER_DETAIL (
                ORDER_DETAIL_ID INT NOT NULL,
                ORDER_ID INT NOT NULL,
                CUS_ID INT NOT NULL,
                ACCOUNT_ID INT NOT NULL,
                PRODUCT_ID INT NOT NULL,
				FAC_ID INT NOT NULL,
                CATEGORY_ID INT NOT NULL,  
                QUANTITY INT NOT NULL,
                PRICE_PER_PRODUCT float  NOT NULL,
                PRIMARY KEY (ORDER_DETAIL_ID),
				FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
				FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID),
				FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID),
				FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
				FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID),
				FOREIGN KEY (FAC_ID) REFERENCES MANUFACTURER(FAC_ID)
);


ALTER TABLE PRODUCT ADD CONSTRAINT manufacture_product_fk
FOREIGN KEY (FAC_ID)
REFERENCES MANUFACTURER (FAC_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE STOCK ADD CONSTRAINT store_stock_fk
FOREIGN KEY (STORE_ID)
REFERENCES STORE (STORE_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE EMPLOYEE ADD CONSTRAINT store_employee_fk
FOREIGN KEY (STORE_ID)
REFERENCES STORE (STORE_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE PRODUCT ADD CONSTRAINT category_product_fk
FOREIGN KEY (CATEGORY_ID)
REFERENCES CATEGORY (CATEGORY_ID)
ON DELETE CASCADE
ON UPDATE CASCADE;

--lỗi
/*
ALTER TABLE STOCK ADD CONSTRAINT product_stock_fk
FOREIGN KEY (CATEGORY_ID, PRODUCT_ID, FAC_ID)
REFERENCES PRODUCT (CATEGORY_ID, PRODUCT_ID, FAC_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;
*/
ALTER TABLE STOCK ADD CONSTRAINT product_stock_fk
FOREIGN KEY (PRODUCT_ID)
REFERENCES PRODUCT (PRODUCT_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;


--lỗi
/*
ALTER TABLE ORDER_DETAIL ADD CONSTRAINT product_order_detail_fk
FOREIGN KEY (PRODUCT_ID, CATEGORY_ID, FAC_ID)
REFERENCES PRODUCT (PRODUCT_ID, CATEGORY_ID, FAC_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;
*/
ALTER TABLE ORDER_DETAIL ADD CONSTRAINT product_order_detail_fk
FOREIGN KEY (PRODUCT_ID)
REFERENCES PRODUCT (PRODUCT_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;



ALTER TABLE CUSTOMER ADD CONSTRAINT account_customer_fk
FOREIGN KEY (ACCOUNT_ID)
REFERENCES ACCOUNT (ACCOUNT_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE EMPLOYEE ADD CONSTRAINT account_employee_fk
FOREIGN KEY (ACCOUNT_ID)
REFERENCES ACCOUNT (ACCOUNT_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

--lỗi
/*
ALTER TABLE EMPLOYEE ADD CONSTRAINT employee_employee_fk
FOREIGN KEY (Parent_EMP_ID, Parent_ACCOUNT_ID)
REFERENCES EMPLOYEE (EMP_ID, ACCOUNT_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;
*/
ALTER TABLE EMPLOYEE ADD CONSTRAINT employee_employee_fk
FOREIGN KEY (Parent_EMP_ID)
REFERENCES EMPLOYEE (EMP_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE ORDERS ADD CONSTRAINT customer_order_fk
FOREIGN KEY (CUS_ID)
REFERENCES CUSTOMER (CUS_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

--lỗi
/*
ALTER TABLE ORDER_DETAIL ADD CONSTRAINT order_order_detail_fk
FOREIGN KEY (ACCOUNT_ID, CUS_ID, ORDER_ID)
REFERENCES ORDERS (ACCOUNT_ID, CUS_ID, ORDER_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;
*/
ALTER TABLE ORDER_DETAIL ADD CONSTRAINT order_order_detail_fk
FOREIGN KEY (ORDER_ID)
REFERENCES ORDERS (ORDER_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

--lỗi
/*
ALTER TABLE TRANSACTIONS ADD CONSTRAINT order_transaction_fk
FOREIGN KEY (ACCOUNT_ID, CUS_ID, ORDER_ID)
REFERENCES ORDER_1 (ACCOUNT_ID, CUS_ID, ORDER_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;
*/
ALTER TABLE TRANSACTIONS ADD CONSTRAINT order_transaction_fk
FOREIGN KEY (ORDER_ID)
REFERENCES ORDERS (ORDER_ID)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

INSERT INTO MANUFACTURER VALUES
('Samsung', 'South Korea', '+821234567890', 'Seoul'),
('Apple', 'USA', '+14081234567', 'Cupertino'),
('Sony', 'Japan', '+81312345678', 'Tokyo'),
('LG', 'South Korea', '+821098765432', 'Seoul'),
('Dell', 'USA', '+18001234567', 'Round Rock'),
('Huawei', 'China', '+8613800138000', 'Shenzhen'),
('Asus', 'Taiwan', '+886212345678', 'Taipei');

INSERT INTO STORE VALUES
('Best Buy', '+16175551234', 'info@bestbuy.com', '123 Main St', 'New York'),
('Target', '+12125559876', 'help@target.com', '456 Elm St', 'Chicago'),
('Walmart', '+14156667788', 'support@walmart.com', '789 Pine St', 'San Francisco'),
('Costco', '+18187771234', 'service@costco.com', '101 Maple St', 'Los Angeles'),
('MediaMarkt', '+49301234567', 'kontakt@mediamarkt.de', 'Karlstrasse 5', 'Berlin'),
('Fnac', '+33123456789', 'support@fnac.com', '12 Avenue des Champs', 'Paris'),
('Lazada', '+6598765432', 'contact@lazada.com', '23 Orchard Road', 'Singapore');

INSERT INTO CATEGORY VALUES
('Electronics'),
('Appliances'),
('Furniture'),
('Clothing'),
('Sports'),
('Books'),
('Toys');

INSERT INTO PRODUCT VALUES
(1, 1, 'Samsung Galaxy S21', 'Smartphone', 'Black', 6, 0.5, '1 year', 799.99),
(1, 2, 'iPhone 13', 'Smartphone', 'White', 6, 0.4, '1 year', 999.99),
(1, 3, 'Sony PlayStation 5', 'Gaming Console', 'White', 10, 4.5, '2 years', 499.99),
(2, 4, 'LG Refrigerator', 'Double Door Fridge', 'Silver', 25, 60.0, '3 years', 1200.00),
(2, 5, 'Dell XPS 15', 'Laptop', 'Silver', 15, 2.0, '1 year', 1500.00),
(1, 6, 'Huawei P40', 'Smartphone', 'Blue', 6, 0.45, '1 year', 799.00),
(1, 7, 'Asus ROG Strix', 'Gaming Laptop', 'Black', 17, 3.0, '2 years', 1800.00);

INSERT INTO STOCK VALUES
(1, 1, 1, 50, 1),
(1, 2, 2, 30, 2),
(1, 3, 3, 20, 3),
(2, 4, 4, 10, 4),
(2, 5, 5, 15, 5),
(1, 6, 6, 25, 6),
(1, 7, 7, 40, 7);

INSERT INTO ACCOUNT VALUES
('johndoe', 'password123', '2023-01-01', 'Active', 'Customer'),
('janedoe', 'password456', '2023-01-02', 'Active', 'Customer'),
('alicew', 'password789', '2023-01-03', 'Inactive', 'Employee'),
('bobk', 'password321', '2023-01-04', 'Active', 'Employee'),
('charliet', 'password654', '2023-01-05', 'Active', 'Customer'),
('danielh', 'password987', '2023-01-06', 'Inactive', 'Employee'),
('ellens', 'password555', '2023-01-07', 'Active', 'Customer');

INSERT INTO EMPLOYEE VALUES
(3, 1, 'Alice', 'Williams', '+16178889999', NULL, NULL, NULL),
(4, 2, 'Bob', 'King', '+12129997777', 3, 1, 3),
(5, 3, 'Charlie', 'Taylor', '+14157776666', NULL, NULL, NULL),
(6, 4, 'Daniel', 'Harris', '+18186665555', 5, 3, 5),
(7, 5, 'Ellen', 'Smith', '+49309998888', NULL, NULL, NULL),
(3, 6, 'Fiona', 'Brown', '+33112223333', 7, 5, 7),
(4, 7, 'George', 'White', '+6599887766', NULL, NULL, NULL);

INSERT INTO CUSTOMER VALUES
(1, 'John', 'Doe', '+12121234567', '123 Main St, New York'),
(2, 'Jane', 'Doe', '+14141234567', '456 Oak St, San Francisco'),
(5, 'Charlie', 'Tucker', '+12125557788', '789 Birch St, Chicago'),
(7, 'Ellen', 'Stark', '+49301234567', '12 Strasse St, Berlin'),
(4, 'James', 'Smith', '+65912345678', '23 Orchard Road, Singapore'),
(6, 'Daniel', 'Young', '+49301122334', '54 Platz Ave, Berlin'),
(3, 'Alice', 'Johnson', '+16178889900', '321 Maple St, Los Angeles');

INSERT INTO ORDERS VALUES
(1, 1, '2023-05-01', 1599.98),
(2, 2, '2023-05-02', 999.99),
(3, 3, '2023-05-03', 499.99),
(4, 4, '2023-05-04', 1200.00),
(5, 5, '2023-05-05', 1800.00),
(6, 6, '2023-05-06', 1500.00),
(7, 7, '2023-05-07', 799.99);

INSERT INTO TRANSACTIONS VALUES
(1, 1, 1, '2023-05-01', 1599.98, 'Completed', 'Credit Card'),
(2, 2, 2, '2023-05-02', 999.99, 'Completed', 'Credit Card'),
(3, 3, 3, '2023-05-03', 499.99, 'Completed', 'PayPal'),
(4, 4, 4, '2023-05-04', 1200.00, 'Pending', 'Bank Transfer'),
(5, 5, 5, '2023-05-05', 1800.00, 'Completed', 'Cash'),
(6, 6, 6, '2023-05-06', 1500.00, 'Pending', 'Bank Transfer'),
(7, 7, 7, '2023-05-07', 799.99, 'Completed', 'Credit Card');

INSERT INTO ORDER_DETAIL VALUES
(1, 1, 1, 1, 1, 1, 1, 2, 799.99),
(2, 2, 2, 2, 2, 1, 1, 5,999.99),
(3, 3, 3, 3, 3, 1, 1, 8,499.99),
(4, 4, 4, 4, 4, 2, 1, 6,1200.00),
(5, 5, 5, 7, 7, 1, 1, 1,1800.00),
(6, 6, 6, 5, 5, 2, 1, 3,1500.00),
(7, 7, 7, 6, 6, 1, 1, 4,799.00);